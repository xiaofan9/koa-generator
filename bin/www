#!/usr/bin/env node
const app = require("../app");
const debug = require("debug")("topstar-api:admin");
const http = require("http");
const config = require("../config");
const kill = require("../app/middleware/kill");

/**
 * 创建http 服务器
 */
async function createServer(port) {
  await kill(port).catch(process.exit);

  const server = http.createServer(app.callback());

  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);

  // 错误处理函数
  function onError(error) {
    if (error.syscall !== "listen") {
      throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
      case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  // 监听函数
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind + ", http://localhost:" + port);
  }
}

function normalizePort(num) {
  let port = parseInt(num, 10);

  if (isNaN(port)) {
    port = 8000;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

const port = normalizePort(config.port || process.env.PORT);

createServer(port);
